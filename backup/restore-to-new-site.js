const WooCommerceRestApi = require('@woocommerce/woocommerce-rest-api').default;
const fs = require('fs');
const path = require('path');
const https = require('https');
const http = require('http');

// CONFIGURACI√ìN DEL SITIO NUEVO
// ‚ö†Ô∏è  IMPORTANTE: Debes actualizar estas credenciales despu√©s de configurar WooCommerce
const NEW_SITE_CONFIG = {
  url: 'https://new.estudioartesana.com/backend',
  consumerKey: '', // ‚ö†Ô∏è  PENDIENTE: Obtener de WooCommerce > Configuraci√≥n > Avanzado > REST API
  consumerSecret: '', // ‚ö†Ô∏è  PENDIENTE: Obtener de WooCommerce > Configuraci√≥n > Avanzado > REST API
  version: 'wc/v3'
};

// Funci√≥n para crear API client cuando tengamos las credenciales
function createApiClient() {
  if (!NEW_SITE_CONFIG.consumerKey || !NEW_SITE_CONFIG.consumerSecret) {
    throw new Error('‚ö†Ô∏è  Credenciales de API no configuradas. Ve al paso 3 del plan de migraci√≥n.');
  }
  
  return new WooCommerceRestApi(NEW_SITE_CONFIG);
}

// Funci√≥n para subir una imagen al nuevo sitio
async function uploadImageToNewSite(imagePath, fileName) {
  // Esta funci√≥n se implementar√° cuando tengamos acceso al servidor
  console.log(`üì∏ Preparando subida de imagen: ${fileName}`);
  
  // Por ahora, solo validamos que el archivo existe
  if (!fs.existsSync(imagePath)) {
    throw new Error(`Imagen no encontrada: ${imagePath}`);
  }
  
  // TODO: Implementar subida real via FTP/SFTP o API de WordPress
  return {
    id: Date.now(), // Temporal
    src: `https://new.estudioartesana.com/backend/wp-content/uploads/${fileName}`,
    name: fileName
  };
}

// Funci√≥n para crear categor√≠as
async function createCategories(wcApi, categories) {
  console.log('\\nüìÇ CREANDO CATEGOR√çAS...');
  console.log('========================');
  
  const createdCategories = [];
  
  for (let i = 0; i < categories.length; i++) {
    const category = categories[i];
    
    try {
      console.log(`‚¨áÔ∏è  [${i + 1}/${categories.length}] ${category.name}`);
      
      const categoryData = {
        name: category.name,
        slug: category.slug,
        description: category.description || '',
        parent: 0, // Por ahora, todas las categor√≠as como principales
        display: 'default',
        image: null // TODO: Agregar im√°genes de categor√≠as si las hay
      };
      
      const response = await wcApi.post('products/categories', categoryData);
      
      createdCategories.push({
        originalId: category.id,
        newId: response.data.id,
        name: category.name,
        slug: category.slug
      });
      
      console.log(`   ‚úÖ Creada: ID ${response.data.id}`);
      
      // Pausa para no sobrecargar
      await new Promise(resolve => setTimeout(resolve, 300));
      
    } catch (error) {
      console.error(`   ‚ùå Error creando categor√≠a ${category.name}:`, error.response?.data?.message || error.message);
    }
  }
  
  console.log(`\\nüìä Categor√≠as creadas: ${createdCategories.length}/${categories.length}`);
  return createdCategories;
}

// Funci√≥n para crear productos
async function createProducts(wcApi, products, categoryMapping, imagesDir) {
  console.log('\\nüì¶ CREANDO PRODUCTOS...');
  console.log('=========================');
  
  const createdProducts = [];
  
  for (let i = 0; i < products.length; i++) {
    const product = products[i];
    
    try {
      console.log(`‚¨áÔ∏è  [${i + 1}/${products.length}] ${product.name}`);
      console.log(`   üí∞ Precio: $${product.price}`);
      console.log(`   üé® Tipo: ${product.type}`);
      
      // Mapear categor√≠as al nuevo sitio
      const newCategories = product.categories.map(cat => {
        const mapping = categoryMapping.find(m => m.originalId === cat.id);
        return mapping ? { id: mapping.newId } : null;
      }).filter(Boolean);
      
      // Procesar im√°genes
      const productImages = [];
      if (product.images && product.images.length > 0) {
        console.log(`   üì∏ Procesando ${product.images.length} im√°genes...`);
        // TODO: Implementar subida de im√°genes
      }
      
      // Preparar datos del producto
      const productData = {
        name: product.name,
        type: product.type,
        regular_price: product.regular_price || product.price,
        description: product.description,
        short_description: product.short_description,
        categories: newCategories,
        images: productImages,
        attributes: product.attributes || [],
        status: 'publish',
        manage_stock: product.manage_stock,
        stock_quantity: product.stock_quantity,
        weight: product.weight,
        dimensions: product.dimensions
      };
      
      // Si es un producto variable, agregar configuraciones especiales
      if (product.type === 'variable') {
        console.log(`   üé® Producto variable con ${product.variations?.length || 0} variaciones`);
        // Las variaciones se crear√°n en una segunda pasada
      }
      
      const response = await wcApi.post('products', productData);
      
      createdProducts.push({
        originalId: product.id,
        newId: response.data.id,
        name: product.name,
        type: product.type,
        originalVariations: product.variations || []
      });
      
      console.log(`   ‚úÖ Creado: ID ${response.data.id}`);
      
      // Pausa para no sobrecargar
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`   ‚ùå Error creando producto ${product.name}:`, error.response?.data?.message || error.message);
    }
  }
  
  console.log(`\\nüìä Productos creados: ${createdProducts.length}/${products.length}`);
  return createdProducts;
}

// Funci√≥n principal de restauraci√≥n
async function restoreToNewSite() {
  console.log('üöÄ INICIANDO MIGRACI√ìN A NEW.ESTUDIOARTESANA.COM');
  console.log('=================================================\\n');
  
  try {
    // Verificar que tenemos las credenciales
    console.log('üîç Verificando configuraci√≥n...');
    const wcApi = createApiClient();
    console.log('‚úÖ Cliente API configurado correctamente\\n');
    
    // Buscar backup m√°s reciente
    const backupDataDir = './backup-data';
    const backupFolders = fs.readdirSync(backupDataDir)
      .filter(folder => fs.statSync(path.join(backupDataDir, folder)).isDirectory())
      .sort()
      .reverse();
    
    if (backupFolders.length === 0) {
      throw new Error('‚ùå No se encontraron backups para restaurar');
    }
    
    const latestBackup = backupFolders[0];
    const backupDir = path.join(backupDataDir, latestBackup);
    
    console.log(`üìÇ Usando backup: ${latestBackup}`);
    console.log(`üìÅ Ruta: ${backupDir}\\n`);
    
    // Cargar datos del backup
    const categoriesFile = path.join(backupDir, 'categories', 'all-categories.json');
    const productsFile = path.join(backupDir, 'products', 'all-products.json');
    const imagesDir = path.join(backupDir, 'images');
    
    if (!fs.existsSync(categoriesFile) || !fs.existsSync(productsFile)) {
      throw new Error('‚ùå Archivos de backup no encontrados');
    }
    
    const categories = JSON.parse(fs.readFileSync(categoriesFile, 'utf8'));
    const products = JSON.parse(fs.readFileSync(productsFile, 'utf8'));
    
    console.log(`üìä DATOS A MIGRAR:`);
    console.log(`   üìÇ Categor√≠as: ${categories.length}`);
    console.log(`   üì¶ Productos: ${products.length}`);
    console.log(`   üé® Productos con variaciones: ${products.filter(p => p.type === 'variable').length}`);
    console.log(`   üñºÔ∏è  Im√°genes: ${fs.existsSync(imagesDir) ? fs.readdirSync(imagesDir).length : 0}\\n`);
    
    // Confirmar antes de proceder
    console.log('‚ö†Ô∏è  ¬øEst√°s listo para proceder con la migraci√≥n?');
    console.log('   Este proceso crear√° productos y categor√≠as en new.estudioartesana.com');
    console.log('   Presiona Ctrl+C para cancelar o contin√∫a...\\n');
    
    // Esperar 3 segundos
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Comenzar migraci√≥n
    const startTime = Date.now();
    
    // 1. Crear categor√≠as
    const categoryMapping = await createCategories(wcApi, categories);
    
    // 2. Crear productos
    const productMapping = await createProducts(wcApi, products, categoryMapping, imagesDir);
    
    // 3. TODO: Crear variaciones para productos variables
    // 4. TODO: Subir im√°genes
    // 5. TODO: Configurar opciones de WooCommerce
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    
    console.log('\\nüéâ MIGRACI√ìN COMPLETADA');
    console.log('=======================');
    console.log(`‚è±Ô∏è  Tiempo total: ${duration} segundos`);
    console.log(`üìÇ Categor√≠as migradas: ${categoryMapping.length}`);
    console.log(`üì¶ Productos migrados: ${productMapping.length}`);
    console.log('\\nüåç Tu nueva tienda est√° disponible en:');
    console.log('   https://new.estudioartesana.com/backend/wp-admin/');
    console.log('\\nüìã PR√ìXIMOS PASOS:');
    console.log('   1. Verificar productos en el admin de WordPress');
    console.log('   2. Subir im√°genes restantes');
    console.log('   3. Configurar el frontend');
    console.log('   4. Probar la funcionalidad completa');
    
  } catch (error) {
    console.error('\\n‚ùå ERROR EN LA MIGRACI√ìN:', error.message);
    console.log('\\nüí° SOLUCIONES:');
    console.log('   1. Verifica que WooCommerce est√© instalado y activo');
    console.log('   2. Configura las credenciales de API correctas');
    console.log('   3. Revisa los permisos del servidor');
  }
}

// Script de verificaci√≥n previa
async function checkPrerequisites() {
  console.log('üîç VERIFICANDO PREREQUISITOS PARA MIGRACI√ìN');
  console.log('===========================================\\n');
  
  const checks = [
    {
      name: 'Backup de datos disponible',
      check: () => {
        const backupDataDir = './backup-data';
        return fs.existsSync(backupDataDir) && fs.readdirSync(backupDataDir).length > 0;
      }
    },
    {
      name: 'Im√°genes descargadas',
      check: () => {
        const backupFolders = fs.readdirSync('./backup-data')
          .filter(folder => fs.statSync(path.join('./backup-data', folder)).isDirectory())
          .sort().reverse();
        
        if (backupFolders.length === 0) return false;
        
        const imagesDir = path.join('./backup-data', backupFolders[0], 'images');
        return fs.existsSync(imagesDir) && fs.readdirSync(imagesDir).length > 0;
      }
    },
    {
      name: 'Sitio nuevo accesible',
      check: async () => {
        try {
          const response = await fetch('https://new.estudioartesana.com/backend/');
          return response.status === 200;
        } catch {
          return false;
        }
      }
    },
    {
      name: 'Credenciales de API configuradas',
      check: () => {
        return NEW_SITE_CONFIG.consumerKey && NEW_SITE_CONFIG.consumerSecret;
      }
    }
  ];
  
  let allPassed = true;
  
  for (const check of checks) {
    try {
      const result = await check.check();
      console.log(`${result ? '‚úÖ' : '‚ùå'} ${check.name}`);
      if (!result) allPassed = false;
    } catch (error) {
      console.log(`‚ùå ${check.name} (Error: ${error.message})`);
      allPassed = false;
    }
  }
  
  console.log(`\\n${allPassed ? 'üéâ' : '‚ö†Ô∏è'} ${allPassed ? 'TODO LISTO' : 'CONFIGURACI√ìN PENDIENTE'}`);
  
  if (!allPassed) {
    console.log('\\nüìã PASOS PENDIENTES:');
    console.log('   1. Instala y activa WooCommerce en new.estudioartesana.com/backend');
    console.log('   2. Crea credenciales de API en WooCommerce > Configuraci√≥n > Avanzado > REST API');
    console.log('   3. Actualiza las credenciales en este script');
  }
  
  return allPassed;
}

// Exportar funciones
module.exports = {
  restoreToNewSite,
  checkPrerequisites,
  NEW_SITE_CONFIG
};

// Ejecutar verificaci√≥n si se ejecuta directamente
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--check')) {
    checkPrerequisites();
  } else if (args.includes('--migrate')) {
    restoreToNewSite();
  } else {
    console.log('üöÄ SCRIPT DE MIGRACI√ìN A NEW.ESTUDIOARTESANA.COM');
    console.log('===============================================');
    console.log('');
    console.log('Opciones disponibles:');
    console.log('  --check    Verificar prerequisitos');
    console.log('  --migrate  Ejecutar migraci√≥n completa');
    console.log('');
    console.log('Ejemplo de uso:');
    console.log('  node restore-to-new-site.js --check');
    console.log('  node restore-to-new-site.js --migrate');
  }
}
